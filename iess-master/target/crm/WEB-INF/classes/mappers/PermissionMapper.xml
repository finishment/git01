<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xxx.crm.dao.PermissionMapper" >

<!--  <cache type="com.xxx.crm.cache.RedisCache"/>-->

  <resultMap id="BaseResultMap" type="com.xxx.crm.entity.Permission" >

    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="module_id" property="moduleId" jdbcType="INTEGER" />
    <result column="acl_value" property="aclValue" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, role_id, module_id, acl_value, create_date, update_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_permission
    where id = #{id,jdbcType=INTEGER}
  </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_permission
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xxx.crm.entity.Permission" >
    insert into t_permission (id, role_id, module_id, 
      acl_value, create_date, update_date
      )
    values (#{id,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{moduleId,jdbcType=INTEGER}, 
      #{aclValue,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xxx.crm.entity.Permission" >
    insert into t_permission
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="moduleId != null" >
        module_id,
      </if>
      <if test="aclValue != null" >
        acl_value,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="moduleId != null" >
        #{moduleId,jdbcType=INTEGER},
      </if>
      <if test="aclValue != null" >
        #{aclValue,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xxx.crm.entity.Permission" >
    update t_permission
    <set >
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="moduleId != null" >
        module_id = #{moduleId,jdbcType=INTEGER},
      </if>
      <if test="aclValue != null" >
        acl_value = #{aclValue,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xxx.crm.entity.Permission" >
    update t_permission
    set role_id = #{roleId,jdbcType=INTEGER},
      module_id = #{moduleId,jdbcType=INTEGER},
      acl_value = #{aclValue,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <!-- 自定义接口方法 -->

  <!-- 根据角色ID查询权限记录条目 -->
  <select id="countPermissionByRoleId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT
      count(1)
    FROM
      `t_permission`
    WHERE
      role_id = #{roleId}
  </select>

  <!-- 根据角色ID删除权限记录 -->
  <delete id="deleteByRoleId"  parameterType="java.lang.Integer">
    DELETE FROM
      `t_permission`
    WHERE
      role_id = #{roleId}
  </delete>

  <!-- 批量添加权限 -->
  <insert id="insertBatch" parameterType="list">
    insert into
      t_permission (role_id, module_id, acl_value, create_date, update_date)
    values
      <foreach collection="list" item="item" separator=",">
        ( #{item.roleId},#{item.moduleId},#{item.aclValue},now(),now() )
      </foreach>
  </insert>

  <!-- 查询指定ID的角色拥有的资源的ID的集合 -->
  <select id="queryRoleHasModulesByRoleId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT
       module_id
    FROM
      `t_permission`
    WHERE
      role_id = #{roleId}
  </select>

  <!-- 根据用户ID查询当前用户拥有的资源的权限码，需要经过角色来查询资源 -->
  <select id="queryUserHasPermissionsByUserId" resultType="java.lang.String" parameterType="java.lang.Integer">
    SELECT DISTINCT
      acl_value
    FROM
      t_user_role ur
      INNER JOIN t_permission p ON ur.role_id = p.role_id
    WHERE
      ur.user_id = #{userId};
  </select>

  <!-- 根据资源ID查询权限记录条目 -->
  <select id="countPermissionByModuleId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    SELECT
      count(*)
    FROM
      `t_permission`
    WHERE
      module_id = #{moduleId}
  </select>

  <!-- 根据资源ID删除权限记录 -->
  <delete id="deletePermissionByModuleId" parameterType="java.lang.Integer">
    DELETE FROM
      `t_permission`
    WHERE
      module_id = #{moduleId}
  </delete>

</mapper>