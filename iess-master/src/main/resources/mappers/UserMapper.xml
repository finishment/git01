<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxx.crm.dao.UserMapper">

<!--  <cache type="com.xxx.crm.cache.RedisCache"/>-->

  <resultMap id="BaseResultMap" type="com.xxx.crm.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_pwd" jdbcType="VARCHAR" property="userPwd" />
    <result column="true_name" jdbcType="VARCHAR" property="trueName" />
    <result column="head" jdbcType="VARCHAR" property="head" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="is_valid" jdbcType="INTEGER" property="isValid" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>

  <sql id="Base_Column_List">
    id, user_name, user_pwd, true_name,head, email, phone, is_valid, create_date, update_date
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.xxx.crm.entity.User">
    insert into t_user (id, user_name, user_pwd,
      true_name,head, email, phone,
      is_valid, create_date, update_date
      )
    values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userPwd,jdbcType=VARCHAR},
      #{trueName,jdbcType=VARCHAR}, #{head,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
      #{isValid,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>

  <!--
    添加操作默认返回的是受影响的行数,可用设置返回主键（自增）
    useGeneratedKeys="true"：获取原生jdbc自增主键的方法
    keyProperty=""：将刚才自增的id封装给哪个属性
    keyColumn="": 数据库中的自增主键是哪个
    返回的主键值会设置到实体类的对应字段中
   -->
  <insert id="insertSelective" parameterType="com.xxx.crm.entity.User" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userPwd != null">
        user_pwd,
      </if>
      <if test="trueName != null">
        true_name,
      </if>
      <if test="head != null">
        head = #{head,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="isValid != null">
        is_valid,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPwd != null">
        #{userPwd,jdbcType=VARCHAR},
      </if>
      <if test="trueName != null">
        #{trueName,jdbcType=VARCHAR},
      </if>
      <if test="head != null">
        head = #{head,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="isValid != null">
        #{isValid,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.xxx.crm.entity.User">
    update t_user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPwd != null">
        user_pwd = #{userPwd,jdbcType=VARCHAR},
      </if>
      <if test="trueName != null">
        true_name = #{trueName,jdbcType=VARCHAR},
      </if>
      <if test="head != null">
        head = #{head,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="isValid != null">
        is_valid = #{isValid,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.xxx.crm.entity.User">
    update iess.t_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_pwd = #{userPwd,jdbcType=VARCHAR},
      true_name = #{trueName,jdbcType=VARCHAR},
      head = #{head,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      is_valid = #{isValid,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--  自定义方法  -->

  <!-- 根据用户名查询用户 -->
  <select id="queryUserByName" parameterType="string" resultType="com.xxx.crm.entity.User">
    SELECT
        <include refid="Base_Column_List"/>
    FROM
        `t_user`
    WHERE
        user_name = #{userName}
  </select>

  <!-- 查询所有的销售人员 -->
  <select id="queryAllSalesman" resultType="java.util.Map">
    SELECT
      u.id uid, u.user_name uname
    FROM
      `t_user` u
      left join
      `t_user_role` ur
    ON
      u.id = ur.user_id
    LEFT JOIN
      `t_role` r
    ON
      r.id = ur.role_id
    WHERE
      r.role_name='销售'
    AND
      r.is_valid = 1
    AND
      u.is_valid = 1
  </select>

  <!-- 多条件查询 -->
  <select id="selectByParams" parameterType="com.xxx.crm.query.UserQuery" resultType="com.xxx.crm.entity.User">
    SELECT
      <include refid="Base_Column_List"/>
    FROM
      `t_user`
    <where>
      is_valid = 1
      <!-- 用户名 -->
      <if test="userName != null and userName != '' ">
        AND user_name LIKE CONCAT('%',#{userName},'%')
      </if>
      <!-- 邮箱查询 -->
      <if test="email != null and email != ''">
        AND email LIKE CONCAT('%',#{email},'%')
      </if>
      <if test="phone != null and phone != ''">
        AND phone LIKE CONCAT('%',#{phone},'%')
      </if>
    </where>

  </select>

  <!-- 查询所有的客户经理 -->
  <select id="queryAllCustomerManagers" resultType="java.util.Map">
    SELECT
      u.id uid, u.user_name uname
    FROM
      `t_user` u
      left join
      `t_user_role` ur
    ON
      u.id = ur.user_id
      LEFT JOIN
      `t_role` r
      ON
      r.id = ur.role_id
    WHERE
      r.role_name='客户经理'
      AND
      r.is_valid = 1
      AND
      u.is_valid = 1
  </select>

    <!-- 批量逻辑删除用户 -->
  <update id="deleteBatch" parameterType="int[]">
    UPDATE
      `t_user`
    SET
      is_valid = 0
    <if test="array != null and array.length > 0">
      <foreach collection="array" open="WHERE id IN(" close=")" separator="," item="id">
        #{id}
      </foreach>
    </if>
  </update>

  <!--以下df添加-->
  <select id="selectMonitorByParams" parameterType="com.xxx.crm.query.UserQuery" resultType="com.xxx.crm.entity.User">
    SELECT
    u.id, u.user_name, u.user_pwd, u.true_name, u.email, u.phone, u.is_valid, u.create_date, u.update_date
    FROM
    `t_user` u
    left join
    `t_user_role` ur
    ON
    u.id = ur.user_id
    LEFT JOIN
    `t_role` r
    ON
    r.id = ur.role_id
    <where>
      r.role_name='班长'
      AND
      r.is_valid = 1
      AND
      u.is_valid = 1
      <!-- 用户名 -->
      <if test="userName != null and userName != '' ">
        AND user_name LIKE CONCAT('%',#{userName},'%')
      </if>
      <!-- 邮箱查询 -->
      <if test="email != null and email != ''">
        AND email LIKE CONCAT('%',#{email},'%')
      </if>
      <if test="phone != null and phone != ''">
        AND phone LIKE CONCAT('%',#{phone},'%')
      </if>
    </where>

  </select>

  <select id="selectLeaderByParams"  resultType="com.xxx.crm.entity.User">
    SELECT
    u.id, u.user_name, u.user_pwd, u.true_name, u.email, u.phone, u.is_valid, u.create_date, u.update_date
    FROM
    `t_user` u
    left join
    `t_user_role` ur
    ON
    u.id = ur.user_id
    LEFT JOIN
    `t_role` r
    ON
    r.id = ur.role_id
    <where>
      r.role_name='组长'
      AND
      u.id in (select user_id from t_class where class_id = (select class_id from t_class where user_id = #{userId}))
      AND
      r.is_valid = 1
      AND
      u.is_valid = 1
      <!-- 用户名 -->
      <if test="userQuery.userName != null and userQuery.userName != '' ">
        AND user_name LIKE CONCAT('%',#{userQuery.userName},'%')
      </if>
      <!-- 邮箱查询 -->
      <if test="userQuery.email != null and userQuery.email != ''">
        AND email LIKE CONCAT('%',#{email},'%')
      </if>
      <if test="userQuery.phone != null and userQuery.phone != ''">
        AND phone LIKE CONCAT('%',#{userQuery.phone},'%')
      </if>
    </where>

  </select>

  <select id="selectStudentByParams" parameterType="com.xxx.crm.query.UserQuery" resultType="com.xxx.crm.entity.User">
    SELECT
    u.id, u.user_name, u.user_pwd, u.true_name, u.email, u.phone, u.is_valid, u.create_date, u.update_date
    FROM
    `t_user` u
    left join
    `t_user_role` ur
    ON
    u.id = ur.user_id
    LEFT JOIN
    `t_role` r
    ON
    r.id = ur.role_id
    <where>
      r.role_name='学员'
      AND
      u.id in (select user_id from t_class where class_id = (select class_id from t_class where user_id = #{userId}) AND group_id = (select group_id from t_class where user_id = #{userId}))
      AND
      r.is_valid = 1
      AND
      u.is_valid = 1
      <!-- 用户名 -->
      <if test="userQuery.userName != null and userQuery.userName != '' ">
        AND user_name LIKE CONCAT('%',#{userQuery.userName},'%')
      </if>
      <!-- 邮箱查询 -->
      <if test="userQuery.email != null and userQuery.email != ''">
        AND email LIKE CONCAT('%',#{userQuery.email},'%')
      </if>
      <if test="userQuery.phone != null and userQuery.phone != ''">
        AND phone LIKE CONCAT('%',#{userQuery.phone},'%')
      </if>
    </where>
  </select>

  <select id="selectClassByParams" resultType="com.xxx.crm.entity.User">
    SELECT
    u.id, u.user_name, u.user_pwd, u.true_name, u.email, u.phone, u.is_valid, u.create_date, u.update_date
    FROM
    `t_user` u
    LEFT JOIN
    `t_class` c
    ON
    u.id = c.user_id
    <where>
      c.class_id = (select class_id from t_class where user_id = #{userId})
      AND
      u.is_valid = 1
      <!-- 用户名 -->
      <if test="userQuery.userName != null and userQuery.userName != '' ">
        AND user_name LIKE CONCAT('%',#{userQuery.userName},'%')
      </if>
      <!-- 邮箱查询 -->
      <if test="userQuery.email != null and userQuery.email != ''">
        AND email LIKE CONCAT('%',#{userQuery.email},'%')
      </if>
      <if test="userQuery.phone != null and userQuery.phone != ''">
        AND phone LIKE CONCAT('%',#{userQuery.phone},'%')
      </if>
    </where>
  </select>

  <select id="selectGroupByPrimaryKey" resultType="com.xxx.crm.entity.StudentGroup">
    select * from t_class where user_id = #{userId}
  </select>

  <insert id="insertStudentGroup" parameterType="com.xxx.crm.entity.StudentGroup">
    insert into t_class
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="groupId != null" >
        group_id,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="annualSal != null">
        annual_sal,
      </if>
      <if test="job != null">
        job,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="groupId != null" >
        #{groupId,jdbcType=INTEGER},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="annualSal != null">
        annual_sal = #{annualSal,jdbcType=DOUBLE},
      </if>
      <if test="job != null">
        job = #{job,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateStudentGroup" parameterType="com.xxx.crm.entity.StudentGroup">
    update t_class
    <set>
      <if test="groupId != null">
        group_id = #{groupId,jdbcType=INTEGER},
      </if>
      <if test="classId != null">
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="annualSal != null">
        annual_sal = #{annualSal,jdbcType=DOUBLE},
      </if>
      <if test="job != null">
        job = #{job,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <!--以上df添加-->
</mapper>
